from aiogram import BaseMiddleware
from aiogram.types import Update
from typing import Callable, Dict, Any, Awaitable
import json
import os
from bot.config import USERS_DIR

class ExistMiddleware(BaseMiddleware):
    def __init__(self, whitelist_file: str = "whitelist.json"):
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(USERS_DIR, exist_ok=True)
        self.whitelist_file = f"{USERS_DIR}/{whitelist_file}"
        self._ensure_whitelist_file()
        print(f"Middleware –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –§–∞–π–ª –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: {self.whitelist_file}")

    def _ensure_whitelist_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.whitelist_file):
            with open(self.whitelist_file, 'w', encoding='utf-8') as f:
                json.dump({"whitelist": [], "admin_ids": []}, f, ensure_ascii=False, indent=2)
            print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: {self.whitelist_file}")

    def _load_whitelist(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.whitelist_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError) as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
            return {"whitelist": [], "admin_ids": []}

    def _save_whitelist(self, data: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –≤ JSON —Ñ–∞–π–ª"""
        with open(self.whitelist_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    def get_whitelist(self) -> set[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        data = self._load_whitelist()
        return set(data.get("whitelist", []))

    def get_admin_ids(self) -> set[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        data = self._load_whitelist()
        return set(data.get("admin_ids", []))

    def add_to_whitelist(self, user_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
        data = self._load_whitelist()
        whitelist = data.get("whitelist", [])

        if user_id not in whitelist:
            whitelist.append(user_id)
            data["whitelist"] = whitelist
            self._save_whitelist(data)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")

    def remove_from_whitelist(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        data = self._load_whitelist()
        whitelist = data.get("whitelist", [])

        if user_id in whitelist:
            whitelist.remove(user_id)
            data["whitelist"] = whitelist
            self._save_whitelist(data)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞")

    def add_admin(self, user_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        data = self._load_whitelist()
        admin_ids = data.get("admin_ids", [])

        if user_id not in admin_ids:
            admin_ids.append(user_id)
            data["admin_ids"] = admin_ids
            self._save_whitelist(data)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

    async def __call__(
            self,
            handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
            event: Update,
            data: Dict[str, Any]
    ) -> Any:

        user_id = await self._extract_user_id(event)

        if user_id is None:
            return await handler(event, data)

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
        whitelist = self.get_whitelist()
        admin_ids = self.get_admin_ids()


        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø (–∞–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø)
        if user_id in whitelist or user_id in admin_ids:
            return await handler(event, data)
        else:
            await self._notify_no_access(event)
            return

    async def _extract_user_id(self, event: Update) -> int | None:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
        if event.message:
            return event.message.from_user.id
        elif event.callback_query:
            return event.callback_query.from_user.id
        elif event.edited_message:
            return event.edited_message.from_user.id
        return None

    async def _notify_no_access(self, event: Update):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–∞"""
        if event.message:
            await event.message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        elif event.callback_query:
            await event.callback_query.answer(
                "üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω",
                show_alert=True
            )