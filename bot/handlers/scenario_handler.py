from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from bot.states.user_state import UserState
from bot.utils.scenario_loader import load_scenario
from bot.keyboards.scenario_keyboards import create_theory_keyboard, create_practice_keyboard

router = Router()


async def send_scenario_step(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    user_data = await state.get_data()
    scenario = user_data['scenario']
    current_step = user_data['current_step']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
    if current_step >= len(scenario['steps']):
        await message.answer("üéâ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start_scenario",
                             reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    step = scenario['steps'][current_step]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —à–∞–≥–∞
    if step['type'] == "theory":
        keyboard = create_theory_keyboard(current_step)
        await message.answer(step['text'], reply_markup=keyboard)
        await state.set_state(UserState.in_scenario)

    elif step['type'] == "practice":
        keyboard = create_practice_keyboard(step['buttons'], current_step)
        await message.answer(step['text'], reply_markup=keyboard)
        await state.set_state(UserState.waiting_answer)

    elif step['type'] == "text_answer":
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∂–¥–µ–º –≤–≤–æ–¥
        text = step['text']
        if 'placeholder' in step:
            text += f"\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* {step['placeholder']}"

        await message.answer(text, reply_markup=ReplyKeyboardRemove())
        await state.set_state(UserState.waiting_text_input)


@router.message(StateFilter(UserState.waiting_text_input))
async def handle_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

    user_data = await state.get_data()
    current_step = user_data['current_step']
    await state.update_data(current_step=current_step + 1)

    await send_scenario_step(message, state)


@router.message(Command("start_scenario"))
async def cmd_start_scenario(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    scenario = load_scenario("test")

    if not scenario:
        await message.answer("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await state.set_state(UserState.in_scenario)
    await state.update_data(
        scenario=scenario,
        current_step=0
    )

    await send_scenario_step(message, state)


@router.callback_query(F.data.startswith("next_"))
async def handle_next_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–¥–∞–ª—å—à–µ'"""
    next_step = int(callback.data.split("_")[1])

    await state.update_data(current_step=next_step)
    await callback.message.edit_reply_markup(reply_markup=None)
    await send_scenario_step(callback.message, state)
    await callback.answer()


@router.callback_query(F.data.startswith("answer_"))
async def handle_answer_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    data_parts = callback.data.split("_")
    step_index = int(data_parts[1])
    user_answer = "_".join(data_parts[2:])

    user_data = await state.get_data()
    scenario = user_data['scenario']
    step = scenario['steps'][step_index]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    is_correct = user_answer == step.get('correct_answer', '')

    if is_correct:
        await callback.message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ...")
        await state.update_data(current_step=step_index + 1)
        await callback.message.edit_reply_markup(reply_markup=None)
        await send_scenario_step(callback.message, state)
    else:
        await callback.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", show_alert=True)

    await callback.answer()
