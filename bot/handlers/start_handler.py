from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.keyboards.menu_keyboards import create_menu_scenarios_list_keyboard
from bot.utils.scenario_loader import get_available_scenarios
from bot.utils.scenario_loader import load_scenario
from bot.handlers.scenario_handler import send_scenario_step
from bot.states.user_state import UserState
router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/scenarios - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"
    )
    await message.answer(welcome_text)


@router.message(Command("scenarios"))
async def cmd_start_scenario(message: Message):
    """–í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞"""
    keyboard = create_menu_scenarios_list_keyboard()
    await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("start_scenario_"))
async def handle_scenario_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    scenario_name = callback.data.replace("start_scenario_", "")


    scenario = load_scenario(scenario_name)

    if not scenario:
        await callback.answer("‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω", show_alert=True)
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    await state.set_state(UserState.in_scenario)
    await state.update_data(
        scenario=scenario,
        current_step=0
    )

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")


    await send_scenario_step(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "refresh_scenarios")
async def handle_refresh_scenarios(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    keyboard = create_menu_scenarios_list_keyboard()
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")


@router.callback_query(F.data.in_(["no_scenarios", "error_scenarios"]))
async def handle_scenario_errors(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)